// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	nasdaq "github.com/wafer-bw/udx-discord-bot/common/apis/nasdaq"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// GetGreeks provides a mock function with given fields: symbol, assetClass, date
func (_m *ClientInterface) GetGreeks(symbol string, assetClass string, date string) (*nasdaq.GreeksResponse, error) {
	ret := _m.Called(symbol, assetClass, date)

	var r0 *nasdaq.GreeksResponse
	if rf, ok := ret.Get(0).(func(string, string, string) *nasdaq.GreeksResponse); ok {
		r0 = rf(symbol, assetClass, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nasdaq.GreeksResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(symbol, assetClass, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOptions provides a mock function with given fields: symbol, assetClass
func (_m *ClientInterface) GetOptions(symbol string, assetClass string) (*nasdaq.OptionsResponse, error) {
	ret := _m.Called(symbol, assetClass)

	var r0 *nasdaq.OptionsResponse
	if rf, ok := ret.Get(0).(func(string, string) *nasdaq.OptionsResponse); ok {
		r0 = rf(symbol, assetClass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nasdaq.OptionsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(symbol, assetClass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuote provides a mock function with given fields: symbol, assetClass
func (_m *ClientInterface) GetQuote(symbol string, assetClass string) (*nasdaq.QuoteResponse, error) {
	ret := _m.Called(symbol, assetClass)

	var r0 *nasdaq.QuoteResponse
	if rf, ok := ret.Get(0).(func(string, string) *nasdaq.QuoteResponse); ok {
		r0 = rf(symbol, assetClass)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nasdaq.QuoteResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(symbol, assetClass)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
