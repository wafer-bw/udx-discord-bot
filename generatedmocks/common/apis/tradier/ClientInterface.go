// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	tradier "github.com/wafer-bw/udx-discord-bot/common/apis/tradier"
)

// ClientInterface is an autogenerated mock type for the ClientInterface type
type ClientInterface struct {
	mock.Mock
}

// GetOptionChain provides a mock function with given fields: symbol, expiration, greeks
func (_m *ClientInterface) GetOptionChain(symbol string, expiration string, greeks bool) (tradier.Chain, error) {
	ret := _m.Called(symbol, expiration, greeks)

	var r0 tradier.Chain
	if rf, ok := ret.Get(0).(func(string, string, bool) tradier.Chain); ok {
		r0 = rf(symbol, expiration, greeks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tradier.Chain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(symbol, expiration, greeks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOptionExpirations provides a mock function with given fields: symbol, includeAllRoots, strikes
func (_m *ClientInterface) GetOptionExpirations(symbol string, includeAllRoots bool, strikes bool) (tradier.Expirations, error) {
	ret := _m.Called(symbol, includeAllRoots, strikes)

	var r0 tradier.Expirations
	if rf, ok := ret.Get(0).(func(string, bool, bool) tradier.Expirations); ok {
		r0 = rf(symbol, includeAllRoots, strikes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tradier.Expirations)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool, bool) error); ok {
		r1 = rf(symbol, includeAllRoots, strikes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQuote provides a mock function with given fields: symbol, greeks
func (_m *ClientInterface) GetQuote(symbol string, greeks bool) (*tradier.Quote, error) {
	ret := _m.Called(symbol, greeks)

	var r0 *tradier.Quote
	if rf, ok := ret.Get(0).(func(string, bool) *tradier.Quote); ok {
		r0 = rf(symbol, greeks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tradier.Quote)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, bool) error); ok {
		r1 = rf(symbol, greeks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
