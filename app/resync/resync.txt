package resync

import (
	"github.com/wafer-bw/udx-discord-bot/app/client"
	"github.com/wafer-bw/udx-discord-bot/app/config"
	"github.com/wafer-bw/udx-discord-bot/app/models"
)

// Deps defines `Resync` dependencies
type Deps struct {
	Client client.Client
}

// impl implements `Resync` properties
type impl struct {
	deps *Deps
}

// Resync interfaces `Resync` methods
type Resync interface {
	Do(guildIDs []string, slashCommands []models.SlashCommand) error
}

// New returns a new `Resync` interface
func New(deps *Deps, conf *config.Config) Resync {
	return &impl{deps: deps}
}

// Do will reregister all of the provided slash commands
func (impl *impl) Do(guildIDs []string, slashCommands []models.SlashCommand) error {
	uniqueGuildIDs := impl.getUniqueGuildIDs(guildIDs, slashCommands)

	oldSlashCommands, err := impl.getOldSlashCommands(uniqueGuildIDs)
	if err != nil {
		return err
	}

	for _, oldSlashCommand := range oldSlashCommands {
		if oldSlashCommand.Global {
			// err := impl.deps.Client.DeleteApplicationCommand(oldSlashCommand.)
		}

	}

}

// func Create(cl client.Client, command models.SlashCommand) {
// 	if command.Global {
// 	}
// }

// func deleteCommands([]models.ApplicationCommand) error {

// 	for _, oldCommand := range oldGlobalCommands {
// 		err := cl.DeleteApplicationCommand(oldCommand.ID)
// 		if err != nil {
// 			return err
// 		}
// 	}
// }

func (impl *impl) getOldSlashCommands(uniqueGuildIDs []string) ([]models.SlashCommand, error) {
	oldSlashCommands := []models.SlashCommand{}
	oldGlobalSlashCommands, err := impl.getOldGlobalSlashCommands()
	if err != nil {
		return nil, err
	}
	oldSlashCommands = append(oldSlashCommands, oldGlobalSlashCommands...)

	oldGuildSlashCommands, err := impl.getOldGuildSlashCommands(uniqueGuildIDs)
	if err != nil {
		return nil, err
	}
	oldSlashCommands = append(oldSlashCommands, oldGuildSlashCommands...)
	return oldSlashCommands, nil
}

func (impl *impl) getOldGlobalSlashCommands() ([]models.SlashCommand, error) {
	globalCommands, err := impl.deps.Client.ListApplicationCommands()
	if err != nil {
		return nil, err
	}

	slashCommands := []models.SlashCommand{}
	for _, globalCommand := range globalCommands {
		slashCommands = append(slashCommands, models.SlashCommand{
			Command: globalCommand,
			Global:  true,
		})
	}

	return slashCommands, nil
}

func (impl *impl) getOldGuildSlashCommands(uniqueGuildIDs []string) ([]models.SlashCommand, error) {
	guildSlashCommandsMap := map[string]models.SlashCommand{}
	for _, id := range uniqueGuildIDs {
		guildCommands, err := impl.deps.Client.ListApplicationCommands(id)
		if err != nil {
			return nil, err
		}
		for _, guildCommand := range guildCommands {
			if guildSlashCommand, ok := guildSlashCommandsMap[guildCommand.Name]; !ok {
				guildSlashCommandsMap[guildCommand.Name] = models.SlashCommand{
					Command:  guildCommand,
					Global:   false,
					GuildIDs: []string{id},
				}
			} else {
				guildSlashCommand.GuildIDs = append(guildSlashCommand.GuildIDs, id)
			}
		}
	}

	slashCommands := []models.SlashCommand{}
	for _, guildSlashCommand := range guildSlashCommandsMap {
		slashCommands = append(slashCommands, guildSlashCommand)
	}

	return slashCommands, nil
}

func (impl *impl) getUniqueGuildIDs(guildIDs []string, slashCommands []models.SlashCommand) []string {
	uniqueGuildIDsMap := map[string]struct{}{}
	for _, id := range guildIDs {
		if _, ok := uniqueGuildIDsMap[id]; !ok {
			uniqueGuildIDsMap[id] = struct{}{}
		}
	}
	for _, slashCommand := range slashCommands {
		if _, ok := uniqueGuildIDsMap[slashCommand.Command.ID]; !ok {
			uniqueGuildIDsMap[slashCommand.Command.ID] = struct{}{}
		}
	}
	uniqueGuildIDs := []string{}
	for id := range uniqueGuildIDsMap {
		uniqueGuildIDs = append(uniqueGuildIDs, id)
	}
	return uniqueGuildIDs
}
