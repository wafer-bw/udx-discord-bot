// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/wafer-bw/udx-discord-bot/app/models"
)

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// CreateGlobalApplicationCommand provides a mock function with given fields: command
func (_m *Client) CreateGlobalApplicationCommand(command *models.ApplicationCommand) error {
	ret := _m.Called(command)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.ApplicationCommand) error); ok {
		r0 = rf(command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGuildApplicationCommand provides a mock function with given fields: guildID, command
func (_m *Client) CreateGuildApplicationCommand(guildID string, command *models.ApplicationCommand) error {
	ret := _m.Called(guildID, command)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.ApplicationCommand) error); ok {
		r0 = rf(guildID, command)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGlobalApplicationCommand provides a mock function with given fields: commandID
func (_m *Client) DeleteGlobalApplicationCommand(commandID string) error {
	ret := _m.Called(commandID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(commandID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGuildApplicationCommand provides a mock function with given fields: guildID, commandID
func (_m *Client) DeleteGuildApplicationCommand(guildID string, commandID string) error {
	ret := _m.Called(guildID, commandID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(guildID, commandID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListGlobalApplicationCommands provides a mock function with given fields:
func (_m *Client) ListGlobalApplicationCommands() ([]*models.ApplicationCommand, error) {
	ret := _m.Called()

	var r0 []*models.ApplicationCommand
	if rf, ok := ret.Get(0).(func() []*models.ApplicationCommand); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ApplicationCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGuildApplicationCommands provides a mock function with given fields: guildID
func (_m *Client) ListGuildApplicationCommands(guildID string) ([]*models.ApplicationCommand, error) {
	ret := _m.Called(guildID)

	var r0 []*models.ApplicationCommand
	if rf, ok := ret.Get(0).(func(string) []*models.ApplicationCommand); ok {
		r0 = rf(guildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.ApplicationCommand)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(guildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
